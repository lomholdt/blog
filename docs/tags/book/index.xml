<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Book on wunderwuzzi blog</title>
    <link>https://wunderwuzzi23.github.io/blog/tags/book/</link>
    <description>Recent content in Book on wunderwuzzi blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; WUNDERWUZZI 2020</copyright>
    <lastBuildDate>Sun, 26 Apr 2020 11:56:51 -0700</lastBuildDate>
    
	<atom:link href="https://wunderwuzzi23.github.io/blog/tags/book/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Leveraging built-in operating system indexing features for credential hunting</title>
      <link>https://wunderwuzzi23.github.io/blog/posts/2020/invoke-windowssearch-credential-hunt/</link>
      <pubDate>Sun, 26 Apr 2020 11:56:51 -0700</pubDate>
      
      <guid>https://wunderwuzzi23.github.io/blog/posts/2020/invoke-windowssearch-credential-hunt/</guid>
      <description>In the previous post we discussed the importance of performing active credential hunting for your organization to ensure clear text credentials in widely accessible locations and source code are identified before an adversary gets a hold of them.
Adversaries also leverage such techniques post-exploitation when looting workstations and servers for credentials and other interesting data.
In this post we are going to explore using built-in operating system indexing features to search for information in files on the machine.</description>
    </item>
    
    <item>
      <title>Mozilla Bug Bounty Credential Hunt Phabricator Token</title>
      <link>https://wunderwuzzi23.github.io/blog/posts/2020/mozilla-bug-bounty-credential-hunt-phabricator-token/</link>
      <pubDate>Sat, 25 Apr 2020 14:20:25 -0700</pubDate>
      
      <guid>https://wunderwuzzi23.github.io/blog/posts/2020/mozilla-bug-bounty-credential-hunt-phabricator-token/</guid>
      <description>Mozilla Phabricator Token Exposure A few days ago I did some security research on Firefox, learning more about code and testing features. One thing I noticed during this research was that Mozilla uses Phabricator.
What is Phabricator? Phabricator is a collaborative web-based toolset for code reviews, checkins, bugs, work items, wiki, pastes, credentials and many other useful things.
API Tokens From past work experience I know that its common for developers to create API tokens for command line usage to interact with Phabricator.</description>
    </item>
    
    <item>
      <title>Attack Graphs - How to create and present them</title>
      <link>https://wunderwuzzi23.github.io/blog/posts/2020/conceptual-attack-graphs/</link>
      <pubDate>Mon, 06 Apr 2020 21:00:30 -0700</pubDate>
      
      <guid>https://wunderwuzzi23.github.io/blog/posts/2020/conceptual-attack-graphs/</guid>
      <description>Conceptual Attack Graphs One question that I have gotten a few times about &amp;ldquo;Cybersecurity Attacks - Red Team Strategies&amp;rdquo; is around the conceptual attack graphs in &amp;ldquo;Chapter 3, Measuring an Offensive Security Program&amp;rdquo;. Specifically, how I create them.
In this post I will briefly go over some of the reasons for creating them, and also how I create them and share a template for others to use and adjust.</description>
    </item>
    
  </channel>
</rss>